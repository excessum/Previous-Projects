package client.gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSplitPane;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;

import remote.interfaces.WhiteBoard;
import remote.interfaces.WhiteBoardHolder;

public class WhiteboardChooserPanel extends JPanel {
	
	private static final long serialVersionUID = 65718805700529742L;
	private JTextField textField;
	private JList<String> jList;
	private JCheckBox chckbxAutoGenerateKey;
	JCheckBox chckbxPublic;
	
	/**
	 * Create the panel.
	 * @param wbLists 
	 * @throws RemoteException 
	 */
	public WhiteboardChooserPanel(WhiteBoardHolder wbLists) throws RemoteException {
		setBounds(100, 100, 451, 250);
		setPreferredSize(new Dimension(451,250));
		setLayout(new BorderLayout());
		setBorder(new EmptyBorder(5, 5, 5, 5));
		setLayout(new BorderLayout(0, 0));
		{
			JSplitPane splitPane = new JSplitPane();
			splitPane.setOrientation(JSplitPane.VERTICAL_SPLIT);
			splitPane.setDividerLocation(117);
			add(splitPane);
			{
				JPanel panel = new JPanel();
				splitPane.setRightComponent(panel);
				panel.setLayout(null);
				{
					textField = new JTextField();
					textField.setBounds(120, 65, 272, 17);
					panel.add(textField);
					textField.setColumns(10);
				}
				
				JLabel lblWhiteboardKey = new JLabel("Whiteboard key");
				lblWhiteboardKey.setLabelFor(textField);
				lblWhiteboardKey.setBounds(20, 67, 101, 14);
				panel.add(lblWhiteboardKey);
				
				JLabel lblConnectToOr = new JLabel("<html>Connect to an existing whiteboard or create a new whiteboard by entering a key. You can share this key with friends or colleagues to collaborate</html>");
				lblConnectToOr.setBounds(20, 9, 392, 45);
				panel.add(lblConnectToOr);
				
				chckbxPublic = new JCheckBox("Public");
				chckbxPublic.setBounds(295, 89, 97, 23);
				panel.add(chckbxPublic);
				{
					chckbxAutoGenerateKey = new JCheckBox("Auto Generate key");
					chckbxAutoGenerateKey.setBounds(152, 89, 141, 23);
					panel.add(chckbxAutoGenerateKey);
				}
			}
			{
				JPanel panel = new JPanel();
				splitPane.setLeftComponent(panel);
				panel.setLayout(new BorderLayout(0, 0));
				{
					JLabel lblPublicWhiteboards = new JLabel("Public Whiteboards");
					panel.add(lblPublicWhiteboards, BorderLayout.NORTH);
				}
				
				JScrollPane scrollPane = new JScrollPane();
				panel.add(scrollPane, BorderLayout.CENTER);
				
				HashMap<String, WhiteBoard> map = null;
				ArrayList<String> publicWhiteboards = new ArrayList<String>();
				map = wbLists.getHashTable();

				for (Map.Entry<String, WhiteBoard> entry : map.entrySet()) {
				    String key = entry.getKey();
				    WhiteBoard value = entry.getValue();
				    if(value.isPublic()) publicWhiteboards.add(key);   
				}
				
				jList = new JList<String>(publicWhiteboards.toArray(new String[publicWhiteboards.size()]));
				scrollPane.setViewportView(jList);
			}
		}
	}
	private String getKeyChosen(){
		if(textField.getText().equalsIgnoreCase("")){
			if(!chckbxAutoGenerateKey.isSelected()){
				if(jList.getSelectedValue() != null){
					return jList.getSelectedValue();
				}
				JOptionPane.showMessageDialog(this, "No whiteboard selected so one has been autogenerated for you, please use whiteboard details to get the key if required");
				return UUID.randomUUID().toString();
			}else{
				return UUID.randomUUID().toString();
			}
		}else{
			return textField.getText();
		}
	}
	
	public String getKey(){
		return this.getKeyChosen();
	}
	
	public boolean isPublic(){
		return this.chckbxPublic.isSelected();
	}

}
